version: "2.4"


services:

  example_container:
    image: docker_python_deps:latest
    # specify container name to conveniently specify 'docker rm o3rdock'
    container_name: example_container 

    # entrypoint: python3 /home/oem/share/oem_logging_example.py 
    # command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*'
    # command: ~/start.sh jupyter lab
    # entrypoint: jupyter notebook --ip 0.0.0.0 --no-browser --NotebookApp.token 'asdfadsfasdfasdfasdf' --NotebookApp.password 'asdfasdfasdfasdf' --NotebookApp.allow_origin '*' --port 8888
    # command: jupyter notebook --ip 0.0.0.0 --no-browser --NotebookApp.token 'asdfadsfasdfasdfasdf' --NotebookApp.password 'asdfasdfasdfasdf' --NotebookApp.allow_origin '*' --port 8888
    entrypoint: /usr/local/bin/deviceQuery

    # It is reccommended to limit connectivity to a specific port, however some interfaces such as CAN may require further development to run via docker container without network_mode: host  
    network_mode: host
    # ports:
    #   - 8888:8888

    # stdin_open: true

    # If the container crashes it should be restarted
    restart: unless-stopped
    
    # In production, use this logging config to avoid hammering ssd with writes
    # comment out these lines to immediately see output of container in console when running docker-compose up
    # logging:
    #   driver: "none"

    runtime:
      nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - IN_DOCKER=1

    volumes:
      - oemshare:/home/oem/share/

# Shared directory between the container and VPU host
volumes:
  oemshare:
    external: true